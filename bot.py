from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import json
import subprocess  # ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import os         # ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

ADMIN_ID = 7355212004  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

def load_allowed():
    with open("allowed.json", "r") as f:
        return set(json.load(f))

def save_allowed(allowed):
    with open("allowed.json", "w") as f:
        json.dump(list(allowed), f)

async def git_push(user_id: int):  # ‚Üê –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è git –æ–ø–µ—Ä–∞—Ü–∏–π
    try:
        repo_dir = os.path.dirname(os.path.abspath(__file__))
        os.chdir(repo_dir)
        subprocess.run(["git", "add", "allowed.json"], check=True)
        subprocess.run(["git", "commit", "-m", f"Update access for {user_id}"], check=True)
        subprocess.run(["git", "push"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Git error: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"User {user_id} tried to access")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    allowed = load_allowed()
    if not allowed:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç/–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print("Warning: allowed.json is empty or not found!")
        await update.message.reply_text("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ allowed.json")
        return

    if user_id not in allowed:
        await update.message.reply_text(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (–≤–∞—à ID: {user_id}). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    import random
    webapp_url = f"https://mafia-moderator.onrender.com/webview"
    
    keyboard = [[
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", web_app=WebAppInfo(url=webapp_url))
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_markup)

async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 7355212004:  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ADMIN_ID
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /grant <user_id>")
        return

    try:
        user_id = int(context.args[0])
        allowed = load_allowed()
        allowed.add(user_id)
        save_allowed(allowed)
        
        # ‚ñº‚ñº‚ñº –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è git push ‚ñº‚ñº‚ñº
        if await git_push(user_id):
            await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –¥–ª—è {user_id} –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ GitHub")
        else:
            await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –¥–ª—è {user_id}, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å GitHub")
        # ‚ñ≤‚ñ≤‚ñ≤ –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ‚ñ≤‚ñ≤‚ñ≤
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def revoke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 7355212004:  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ADMIN_ID
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /revoke <user_id>")
        return

    try:
        user_id = int(context.args[0])
        allowed = load_allowed()
        allowed.discard(user_id)
        save_allowed(allowed)
        
        # ‚ñº‚ñº‚ñº –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è git push ‚ñº‚ñº‚ñº
        if await git_push(user_id):
            await update.message.reply_text(f"üö´ –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É {user_id} –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ GitHub")
        else:
            await update.message.reply_text(f"üö´ –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É {user_id}, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å GitHub")
        # ‚ñ≤‚ñ≤‚ñ≤ –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ‚ñ≤‚ñ≤‚ñ≤
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

app = ApplicationBuilder().token("7398262284:AAE0MPai4JPZC1XkdDI14Mrc68Ke1buYEtY").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("grant", grant))
app.add_handler(CommandHandler("revoke", revoke))

app.run_polling()